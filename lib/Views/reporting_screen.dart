import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../Services/pos_service.dart';

class ReportingScreen extends StatefulWidget {
  const ReportingScreen({super.key});

  @override
  State<ReportingScreen> createState() => _ReportingScreenState();
}

class _ReportingScreenState extends State<ReportingScreen> {
  DateTime _selectedDate = DateTime.now();

  String get _dateStr => _selectedDate.toIso8601String().split('T').first;

  Future<void> _refreshReports(BuildContext context) async {
    final pos = Provider.of<PosService>(context, listen: false);
    await pos.fetchSalesReport();
    await pos.fetchDailySalesReport(_dateStr);
    await pos.fetchTaxReport(_dateStr);
  }

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (!mounted) return;
      final pos = Provider.of<PosService>(context, listen: false);
      // Fire-and-forget refresh calls; avoid passing context across async gaps
      pos.fetchSalesReport();
      pos.fetchDailySalesReport(_dateStr);
      pos.fetchTaxReport(_dateStr);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Sales and Tax Reports'),
        backgroundColor: Colors.deepOrange,
        actions: [
          IconButton(
            tooltip: 'Pick Date',
            icon: const Icon(Icons.calendar_month),
            onPressed: () async {
              final pos = Provider.of<PosService>(context, listen: false);
              final picked = await showDatePicker(
                context: context,
                initialDate: _selectedDate,
                firstDate: DateTime(2020),
                lastDate: DateTime.now().add(const Duration(days: 365)),
              );
              if (picked != null) {
                if (!mounted) return;
                setState(() => _selectedDate = picked);
                // Use captured service to refresh without reusing BuildContext after await
                await pos.fetchSalesReport();
                await pos.fetchDailySalesReport(_dateStr);
                await pos.fetchTaxReport(_dateStr);
              }
            },
          ),
          IconButton(
            tooltip: 'Refresh',
            icon: const Icon(Icons.refresh),
            onPressed: () => _refreshReports(context),
          ),
        ],
      ),
      body: RefreshIndicator(
        onRefresh: () => _refreshReports(context),
        child: Consumer<PosService>(
          builder: (context, posService, child) {
            return ListView(
              padding: const EdgeInsets.all(16.0),
              children: [
                // Overall Sales Report
                Card(
                  elevation: 4,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Overall Sales Summary',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 8),
                        if (posService.salesReport == null)
                          const Text('Loading overall sales...')
                        else ...[
                          Builder(
                            builder: (ctx) {
                              final sales = posService.salesReport!;
                              final totalInvoices = sales['total_invoices'];
                              final totalSales = (sales['total_sales'] as num)
                                  .toDouble();
                              final totalTax = (sales['total_tax'] as num)
                                  .toDouble();
                              final generatedBy = sales['generated_by'];
                              return Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text('Total Invoices: $totalInvoices'),
                                  Text(
                                    'Total Sales: K${totalSales.toStringAsFixed(2)}',
                                  ),
                                  Text(
                                    'Total Tax: K${totalTax.toStringAsFixed(2)}',
                                  ),
                                  Text('Generated By: $generatedBy'),
                                ],
                              );
                            },
                          ),
                        ],
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                // Daily Sales Report
                Card(
                  elevation: 4,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Daily Sales Report ($_dateStr)',
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 8),
                        if (posService.dailySalesReport == null)
                          const Text('Loading daily sales...')
                        else ...[
                          Builder(
                            builder: (_) {
                              final dr = posService.dailySalesReport!;
                              final totalSales = (dr['total_sales'] as num)
                                  .toDouble();
                              final orders = dr['orders'] as List;
                              return Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    'Total Sales: K${totalSales.toStringAsFixed(2)}',
                                  ),
                                  const SizedBox(height: 8),
                                  ...orders.map<Widget>((order) {
                                    final id = order['id'];
                                    final pid = order['product_id'];
                                    final qty = order['quantity'];
                                    final total = (order['total_price'] as num)
                                        .toDouble();
                                    return Text(
                                      'Order ID: $id, Product: $pid, Qty: $qty, Total: K${total.toStringAsFixed(2)}',
                                    );
                                  }),
                                ],
                              );
                            },
                          ),
                        ],
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                // Tax Report
                Card(
                  elevation: 4,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Tax Report ($_dateStr)',
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 8),
                        if (posService.taxReport == null)
                          const Text('Loading tax report...')
                        else ...[
                          Builder(
                            builder: (_) {
                              final tr = posService.taxReport!;
                              final totalTax = (tr['total_tax'] as num)
                                  .toDouble();
                              final invoices = tr['invoices'] as List;
                              return Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    'Total Tax: K${totalTax.toStringAsFixed(2)}',
                                  ),
                                  const SizedBox(height: 8),
                                  ...invoices.map<Widget>((invoice) {
                                    final id = invoice['id'];
                                    final cis = invoice['cis_invc_no'];
                                    final total =
                                        (invoice['total_amount'] as num)
                                            .toDouble();
                                    final tax = (invoice['tax_amount'] as num)
                                        .toDouble();
                                    return Text(
                                      'Invoice ID: $id, CIS No: $cis, Total: K${total.toStringAsFixed(2)}, Tax: K${tax.toStringAsFixed(2)}',
                                    );
                                  }),
                                ],
                              );
                            },
                          ),
                        ],
                      ],
                    ),
                  ),
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}
